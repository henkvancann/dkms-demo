import 'package:meta/meta.dart';

/// Base class for various kinds of tasks.
/// Note: Normally you do not manually create instances of this task (or its brothers), but instead
/// it is generated automatically by the codegen.
@immutable
abstract class FlutterRustBridgeBaseTask {
  final FlutterRustBridgeTaskConstMeta constMeta;
  final List<dynamic> argValues;
  final dynamic hint;

  const FlutterRustBridgeBaseTask({
    required this.constMeta,
    required this.argValues,
    required this.hint,
  });

  String get debugName => constMeta.debugName;

  Iterable<MapEntry<String, dynamic>> get argMapEntries sync* {
    for (var i = 0; i < constMeta.argNames.length; ++i) {
      yield MapEntry(constMeta.argNames[i], argValues[i]);
    }
  }

  Map<String, dynamic> get argMap => Map.fromEntries(argMapEntries);
}

/// Metadata that does not change across different method calls. Thus it is made `const` to save memory and speed up
@immutable
class FlutterRustBridgeTaskConstMeta {
  final String debugName;
  final List<String> argNames;

  const FlutterRustBridgeTaskConstMeta({
    required this.debugName,
    required this.argNames,
  });
}

/// An exception that is generated by Rust code.
@immutable
class FfiException {
  final String code;
  final String message;
  final Object? details;

  FfiException(this.code, this.message, this.details);

  @override
  String toString() => 'FfiException($code, $message, $details)';
}

/// Exception when timeout happens using [FlutterRustBridgeTimeoutMixin]
class FlutterRustBridgeTimeoutException {
  /// The duration to trigger timeout
  final Duration duration;

  /// debugName of the task, usually the ffi function name
  final String debugName;

  /// The stack trace of the error
  final StackTrace stackTrace;

  FlutterRustBridgeTimeoutException(this.duration, this.debugName, this.stackTrace);

  @override
  String toString() =>
      'FlutterRustBridgeTimeoutException(debugName=$debugName,duration=$duration,stackTrace=$stackTrace)';
}
